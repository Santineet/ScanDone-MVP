//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.file` struct is generated, and contains static references to 3 files.
  struct file {
    /// Resource file `DF_Info.txt`.
    static let df_InfoTxt = Rswift.FileResource(bundle: R.hostingBundle, name: "DF_Info", pathExtension: "txt")
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `tessdata`.
    static let tessdata = Rswift.FileResource(bundle: R.hostingBundle, name: "tessdata", pathExtension: "")
    
    /// `bundle.url(forResource: "DF_Info", withExtension: "txt")`
    static func df_InfoTxt(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.df_InfoTxt
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "tessdata", withExtension: "")`
    static func tessdata(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.tessdata
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 8 fonts.
  struct font: Rswift.Validatable {
    /// Font `Lato-Bold`.
    static let latoBold = Rswift.FontResource(fontName: "Lato-Bold")
    /// Font `Lato-Medium`.
    static let latoMedium = Rswift.FontResource(fontName: "Lato-Medium")
    /// Font `Lato-Regular`.
    static let latoRegular = Rswift.FontResource(fontName: "Lato-Regular")
    /// Font `Roboto-Bold`.
    static let robotoBold = Rswift.FontResource(fontName: "Roboto-Bold")
    /// Font `Roboto-Medium`.
    static let robotoMedium = Rswift.FontResource(fontName: "Roboto-Medium")
    /// Font `Roboto-Regular`.
    static let robotoRegular = Rswift.FontResource(fontName: "Roboto-Regular")
    /// Font `TitilliumWeb-Regular`.
    static let titilliumWebRegular = Rswift.FontResource(fontName: "TitilliumWeb-Regular")
    /// Font `TitilliumWeb-SemiBold`.
    static let titilliumWebSemiBold = Rswift.FontResource(fontName: "TitilliumWeb-SemiBold")
    
    /// `UIFont(name: "Lato-Bold", size: ...)`
    static func latoBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: latoBold, size: size)
    }
    
    /// `UIFont(name: "Lato-Medium", size: ...)`
    static func latoMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: latoMedium, size: size)
    }
    
    /// `UIFont(name: "Lato-Regular", size: ...)`
    static func latoRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: latoRegular, size: size)
    }
    
    /// `UIFont(name: "Roboto-Bold", size: ...)`
    static func robotoBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoBold, size: size)
    }
    
    /// `UIFont(name: "Roboto-Medium", size: ...)`
    static func robotoMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoMedium, size: size)
    }
    
    /// `UIFont(name: "Roboto-Regular", size: ...)`
    static func robotoRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoRegular, size: size)
    }
    
    /// `UIFont(name: "TitilliumWeb-Regular", size: ...)`
    static func titilliumWebRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: titilliumWebRegular, size: size)
    }
    
    /// `UIFont(name: "TitilliumWeb-SemiBold", size: ...)`
    static func titilliumWebSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: titilliumWebSemiBold, size: size)
    }
    
    static func validate() throws {
      if R.font.latoBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Lato-Bold' could not be loaded, is 'Lato-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.latoMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Lato-Medium' could not be loaded, is 'Lato-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.latoRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Lato-Regular' could not be loaded, is 'Lato-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Bold' could not be loaded, is 'Roboto-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Medium' could not be loaded, is 'Roboto-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Regular' could not be loaded, is 'Roboto-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.titilliumWebRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'TitilliumWeb-Regular' could not be loaded, is 'TitilliumWeb-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.titilliumWebSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'TitilliumWeb-SemiBold' could not be loaded, is 'TitilliumWeb-SemiBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 59 images.
  struct image {
    /// Image `IconMainScan`.
    static let iconMainScan = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconMainScan")
    /// Image `Splash-Loading`.
    static let splashLoading = Rswift.ImageResource(bundle: R.hostingBundle, name: "Splash-Loading")
    /// Image `camera-done`.
    static let cameraDone = Rswift.ImageResource(bundle: R.hostingBundle, name: "camera-done")
    /// Image `camera-restart`.
    static let cameraRestart = Rswift.ImageResource(bundle: R.hostingBundle, name: "camera-restart")
    /// Image `camera-start`.
    static let cameraStart = Rswift.ImageResource(bundle: R.hostingBundle, name: "camera-start")
    /// Image `df-apple-intro-apps`.
    static let dfAppleIntroApps = Rswift.ImageResource(bundle: R.hostingBundle, name: "df-apple-intro-apps")
    /// Image `df-apple-intro-icon`.
    static let dfAppleIntroIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "df-apple-intro-icon")
    /// Image `df-apple-photo-library`.
    static let dfApplePhotoLibrary = Rswift.ImageResource(bundle: R.hostingBundle, name: "df-apple-photo-library")
    /// Image `df-apple-results-alert`.
    static let dfAppleResultsAlert = Rswift.ImageResource(bundle: R.hostingBundle, name: "df-apple-results-alert")
    /// Image `document-loading`.
    static let documentLoading = Rswift.ImageResource(bundle: R.hostingBundle, name: "document-loading")
    /// Image `document-temp`.
    static let documentTemp = Rswift.ImageResource(bundle: R.hostingBundle, name: "document-temp")
    /// Image `edit-document-crop`.
    static let editDocumentCrop = Rswift.ImageResource(bundle: R.hostingBundle, name: "edit-document-crop")
    /// Image `edit-document-delete`.
    static let editDocumentDelete = Rswift.ImageResource(bundle: R.hostingBundle, name: "edit-document-delete")
    /// Image `edit-document-rotate`.
    static let editDocumentRotate = Rswift.ImageResource(bundle: R.hostingBundle, name: "edit-document-rotate")
    /// Image `folder-list-arrow`.
    static let folderListArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "folder-list-arrow")
    /// Image `folder-list-folder`.
    static let folderListFolder = Rswift.ImageResource(bundle: R.hostingBundle, name: "folder-list-folder")
    /// Image `folder-list-line`.
    static let folderListLine = Rswift.ImageResource(bundle: R.hostingBundle, name: "folder-list-line")
    /// Image `horizontal-menu-item-about`.
    static let horizontalMenuItemAbout = Rswift.ImageResource(bundle: R.hostingBundle, name: "horizontal-menu-item-about")
    /// Image `horizontal-menu-item-add-camera`.
    static let horizontalMenuItemAddCamera = Rswift.ImageResource(bundle: R.hostingBundle, name: "horizontal-menu-item-add-camera")
    /// Image `horizontal-menu-item-back`.
    static let horizontalMenuItemBack = Rswift.ImageResource(bundle: R.hostingBundle, name: "horizontal-menu-item-back")
    /// Image `horizontal-menu-item-camera`.
    static let horizontalMenuItemCamera = Rswift.ImageResource(bundle: R.hostingBundle, name: "horizontal-menu-item-camera")
    /// Image `horizontal-menu-item-close`.
    static let horizontalMenuItemClose = Rswift.ImageResource(bundle: R.hostingBundle, name: "horizontal-menu-item-close")
    /// Image `horizontal-menu-item-copied`.
    static let horizontalMenuItemCopied = Rswift.ImageResource(bundle: R.hostingBundle, name: "horizontal-menu-item-copied")
    /// Image `horizontal-menu-item-copy`.
    static let horizontalMenuItemCopy = Rswift.ImageResource(bundle: R.hostingBundle, name: "horizontal-menu-item-copy")
    /// Image `horizontal-menu-item-delete`.
    static let horizontalMenuItemDelete = Rswift.ImageResource(bundle: R.hostingBundle, name: "horizontal-menu-item-delete")
    /// Image `horizontal-menu-item-edit`.
    static let horizontalMenuItemEdit = Rswift.ImageResource(bundle: R.hostingBundle, name: "horizontal-menu-item-edit")
    /// Image `horizontal-menu-item-export`.
    static let horizontalMenuItemExport = Rswift.ImageResource(bundle: R.hostingBundle, name: "horizontal-menu-item-export")
    /// Image `horizontal-menu-item-filters`.
    static let horizontalMenuItemFilters = Rswift.ImageResource(bundle: R.hostingBundle, name: "horizontal-menu-item-filters")
    /// Image `horizontal-menu-item-language`.
    static let horizontalMenuItemLanguage = Rswift.ImageResource(bundle: R.hostingBundle, name: "horizontal-menu-item-language")
    /// Image `horizontal-menu-item-menu`.
    static let horizontalMenuItemMenu = Rswift.ImageResource(bundle: R.hostingBundle, name: "horizontal-menu-item-menu")
    /// Image `horizontal-menu-item-more`.
    static let horizontalMenuItemMore = Rswift.ImageResource(bundle: R.hostingBundle, name: "horizontal-menu-item-more")
    /// Image `horizontal-menu-item-ocr`.
    static let horizontalMenuItemOcr = Rswift.ImageResource(bundle: R.hostingBundle, name: "horizontal-menu-item-ocr")
    /// Image `horizontal-menu-item-select`.
    static let horizontalMenuItemSelect = Rswift.ImageResource(bundle: R.hostingBundle, name: "horizontal-menu-item-select")
    /// Image `icon_copy_recognize_text`.
    static let icon_copy_recognize_text = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_copy_recognize_text")
    /// Image `icon_flash_off`.
    static let icon_flash_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_flash_off")
    /// Image `icon_flash_on`.
    static let icon_flash_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_flash_on")
    /// Image `icon_recognize_down_arrow`.
    static let icon_recognize_down_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_recognize_down_arrow")
    /// Image `icon_recognize_up_arrow`.
    static let icon_recognize_up_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_recognize_up_arrow")
    /// Image `icon_select_docs_checked`.
    static let icon_select_docs_checked = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_select_docs_checked")
    /// Image `icon_share_recognize_text`.
    static let icon_share_recognize_text = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_share_recognize_text")
    /// Image `image-nav-checked-disabled`.
    static let imageNavCheckedDisabled = Rswift.ImageResource(bundle: R.hostingBundle, name: "image-nav-checked-disabled")
    /// Image `image-nav-checked-enabled`.
    static let imageNavCheckedEnabled = Rswift.ImageResource(bundle: R.hostingBundle, name: "image-nav-checked-enabled")
    /// Image `image-nav-close`.
    static let imageNavClose = Rswift.ImageResource(bundle: R.hostingBundle, name: "image-nav-close")
    /// Image `image-nav-item-back`.
    static let imageNavItemBack = Rswift.ImageResource(bundle: R.hostingBundle, name: "image-nav-item-back")
    /// Image `image-nav-settings-close`.
    static let imageNavSettingsClose = Rswift.ImageResource(bundle: R.hostingBundle, name: "image-nav-settings-close")
    /// Image `image-recognizer-footer`.
    static let imageRecognizerFooter = Rswift.ImageResource(bundle: R.hostingBundle, name: "image-recognizer-footer")
    /// Image `launch-screen-logo-animated.gif`.
    static let launchScreenLogoAnimatedGif = Rswift.ImageResource(bundle: R.hostingBundle, name: "launch-screen-logo-animated.gif")
    /// Image `nav-close`.
    static let navClose = Rswift.ImageResource(bundle: R.hostingBundle, name: "nav-close")
    /// Image `onboarding-edit.gif`.
    static let onboardingEditGif = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding-edit.gif")
    /// Image `onboarding-export.gif`.
    static let onboardingExportGif = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding-export.gif")
    /// Image `onboarding-scan-ai.gif`.
    static let onboardingScanAiGif = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding-scan-ai.gif")
    /// Image `permission-camera`.
    static let permissionCamera = Rswift.ImageResource(bundle: R.hostingBundle, name: "permission-camera")
    /// Image `permission-photoLibrary`.
    static let permissionPhotoLibrary = Rswift.ImageResource(bundle: R.hostingBundle, name: "permission-photoLibrary")
    /// Image `premium-buy-cell-arrow`.
    static let premiumBuyCellArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "premium-buy-cell-arrow")
    /// Image `premium-logo`.
    static let premiumLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "premium-logo")
    /// Image `scan_attention_small`.
    static let scan_attention_small = Rswift.ImageResource(bundle: R.hostingBundle, name: "scan_attention_small")
    /// Image `scan_attention`.
    static let scan_attention = Rswift.ImageResource(bundle: R.hostingBundle, name: "scan_attention")
    /// Image `scan_bug`.
    static let scan_bug = Rswift.ImageResource(bundle: R.hostingBundle, name: "scan_bug")
    /// Image `scan_checkmark`.
    static let scan_checkmark = Rswift.ImageResource(bundle: R.hostingBundle, name: "scan_checkmark")
    
    /// `UIImage(named: "IconMainScan", bundle: ..., traitCollection: ...)`
    static func iconMainScan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconMainScan, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Splash-Loading", bundle: ..., traitCollection: ...)`
    static func splashLoading(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splashLoading, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "camera-done", bundle: ..., traitCollection: ...)`
    static func cameraDone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cameraDone, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "camera-restart", bundle: ..., traitCollection: ...)`
    static func cameraRestart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cameraRestart, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "camera-start", bundle: ..., traitCollection: ...)`
    static func cameraStart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cameraStart, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "df-apple-intro-apps", bundle: ..., traitCollection: ...)`
    static func dfAppleIntroApps(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dfAppleIntroApps, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "df-apple-intro-icon", bundle: ..., traitCollection: ...)`
    static func dfAppleIntroIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dfAppleIntroIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "df-apple-photo-library", bundle: ..., traitCollection: ...)`
    static func dfApplePhotoLibrary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dfApplePhotoLibrary, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "df-apple-results-alert", bundle: ..., traitCollection: ...)`
    static func dfAppleResultsAlert(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dfAppleResultsAlert, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "document-loading", bundle: ..., traitCollection: ...)`
    static func documentLoading(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.documentLoading, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "document-temp", bundle: ..., traitCollection: ...)`
    static func documentTemp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.documentTemp, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "edit-document-crop", bundle: ..., traitCollection: ...)`
    static func editDocumentCrop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.editDocumentCrop, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "edit-document-delete", bundle: ..., traitCollection: ...)`
    static func editDocumentDelete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.editDocumentDelete, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "edit-document-rotate", bundle: ..., traitCollection: ...)`
    static func editDocumentRotate(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.editDocumentRotate, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "folder-list-arrow", bundle: ..., traitCollection: ...)`
    static func folderListArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.folderListArrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "folder-list-folder", bundle: ..., traitCollection: ...)`
    static func folderListFolder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.folderListFolder, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "folder-list-line", bundle: ..., traitCollection: ...)`
    static func folderListLine(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.folderListLine, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "horizontal-menu-item-about", bundle: ..., traitCollection: ...)`
    static func horizontalMenuItemAbout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.horizontalMenuItemAbout, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "horizontal-menu-item-add-camera", bundle: ..., traitCollection: ...)`
    static func horizontalMenuItemAddCamera(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.horizontalMenuItemAddCamera, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "horizontal-menu-item-back", bundle: ..., traitCollection: ...)`
    static func horizontalMenuItemBack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.horizontalMenuItemBack, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "horizontal-menu-item-camera", bundle: ..., traitCollection: ...)`
    static func horizontalMenuItemCamera(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.horizontalMenuItemCamera, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "horizontal-menu-item-close", bundle: ..., traitCollection: ...)`
    static func horizontalMenuItemClose(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.horizontalMenuItemClose, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "horizontal-menu-item-copied", bundle: ..., traitCollection: ...)`
    static func horizontalMenuItemCopied(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.horizontalMenuItemCopied, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "horizontal-menu-item-copy", bundle: ..., traitCollection: ...)`
    static func horizontalMenuItemCopy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.horizontalMenuItemCopy, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "horizontal-menu-item-delete", bundle: ..., traitCollection: ...)`
    static func horizontalMenuItemDelete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.horizontalMenuItemDelete, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "horizontal-menu-item-edit", bundle: ..., traitCollection: ...)`
    static func horizontalMenuItemEdit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.horizontalMenuItemEdit, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "horizontal-menu-item-export", bundle: ..., traitCollection: ...)`
    static func horizontalMenuItemExport(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.horizontalMenuItemExport, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "horizontal-menu-item-filters", bundle: ..., traitCollection: ...)`
    static func horizontalMenuItemFilters(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.horizontalMenuItemFilters, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "horizontal-menu-item-language", bundle: ..., traitCollection: ...)`
    static func horizontalMenuItemLanguage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.horizontalMenuItemLanguage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "horizontal-menu-item-menu", bundle: ..., traitCollection: ...)`
    static func horizontalMenuItemMenu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.horizontalMenuItemMenu, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "horizontal-menu-item-more", bundle: ..., traitCollection: ...)`
    static func horizontalMenuItemMore(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.horizontalMenuItemMore, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "horizontal-menu-item-ocr", bundle: ..., traitCollection: ...)`
    static func horizontalMenuItemOcr(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.horizontalMenuItemOcr, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "horizontal-menu-item-select", bundle: ..., traitCollection: ...)`
    static func horizontalMenuItemSelect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.horizontalMenuItemSelect, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_copy_recognize_text", bundle: ..., traitCollection: ...)`
    static func icon_copy_recognize_text(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_copy_recognize_text, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_flash_off", bundle: ..., traitCollection: ...)`
    static func icon_flash_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_flash_off, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_flash_on", bundle: ..., traitCollection: ...)`
    static func icon_flash_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_flash_on, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_recognize_down_arrow", bundle: ..., traitCollection: ...)`
    static func icon_recognize_down_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_recognize_down_arrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_recognize_up_arrow", bundle: ..., traitCollection: ...)`
    static func icon_recognize_up_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_recognize_up_arrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_select_docs_checked", bundle: ..., traitCollection: ...)`
    static func icon_select_docs_checked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_select_docs_checked, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_share_recognize_text", bundle: ..., traitCollection: ...)`
    static func icon_share_recognize_text(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_share_recognize_text, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "image-nav-checked-disabled", bundle: ..., traitCollection: ...)`
    static func imageNavCheckedDisabled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imageNavCheckedDisabled, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "image-nav-checked-enabled", bundle: ..., traitCollection: ...)`
    static func imageNavCheckedEnabled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imageNavCheckedEnabled, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "image-nav-close", bundle: ..., traitCollection: ...)`
    static func imageNavClose(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imageNavClose, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "image-nav-item-back", bundle: ..., traitCollection: ...)`
    static func imageNavItemBack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imageNavItemBack, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "image-nav-settings-close", bundle: ..., traitCollection: ...)`
    static func imageNavSettingsClose(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imageNavSettingsClose, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "image-recognizer-footer", bundle: ..., traitCollection: ...)`
    static func imageRecognizerFooter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imageRecognizerFooter, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "launch-screen-logo-animated.gif", bundle: ..., traitCollection: ...)`
    static func launchScreenLogoAnimatedGif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launchScreenLogoAnimatedGif, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "nav-close", bundle: ..., traitCollection: ...)`
    static func navClose(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navClose, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "onboarding-edit.gif", bundle: ..., traitCollection: ...)`
    static func onboardingEditGif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboardingEditGif, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "onboarding-export.gif", bundle: ..., traitCollection: ...)`
    static func onboardingExportGif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboardingExportGif, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "onboarding-scan-ai.gif", bundle: ..., traitCollection: ...)`
    static func onboardingScanAiGif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboardingScanAiGif, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "permission-camera", bundle: ..., traitCollection: ...)`
    static func permissionCamera(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.permissionCamera, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "permission-photoLibrary", bundle: ..., traitCollection: ...)`
    static func permissionPhotoLibrary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.permissionPhotoLibrary, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "premium-buy-cell-arrow", bundle: ..., traitCollection: ...)`
    static func premiumBuyCellArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.premiumBuyCellArrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "premium-logo", bundle: ..., traitCollection: ...)`
    static func premiumLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.premiumLogo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "scan_attention", bundle: ..., traitCollection: ...)`
    static func scan_attention(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.scan_attention, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "scan_attention_small", bundle: ..., traitCollection: ...)`
    static func scan_attention_small(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.scan_attention_small, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "scan_bug", bundle: ..., traitCollection: ...)`
    static func scan_bug(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.scan_bug, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "scan_checkmark", bundle: ..., traitCollection: ...)`
    static func scan_checkmark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.scan_checkmark, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 21 nibs.
  struct nib {
    /// Nib `BuySubscriptionCell`.
    static let buySubscriptionCell = _R.nib._BuySubscriptionCell()
    /// Nib `DFAppleImageCell`.
//    static let dfAppleImageCell = _R.nib._DFAppleImageCell()
//    /// Nib `DFAppleLoadingView`.
//    static let dfAppleLoadingView = _R.nib._DFAppleLoadingView()
//    /// Nib `DFAppleSubtitleCell`.
//    static let dfAppleSubtitleCell = _R.nib._DFAppleSubtitleCell()
//    /// Nib `DFAppleTextCell`.
//    static let dfAppleTextCell = _R.nib._DFAppleTextCell()
//    /// Nib `DFAppleTitleCell`.
//    static let dfAppleTitleCell = _R.nib._DFAppleTitleCell()
    /// Nib `EditItemCell`.
    static let editItemCell = _R.nib._EditItemCell()
    /// Nib `EmptyCollectionReusableView`.
    static let emptyCollectionReusableView = _R.nib._EmptyCollectionReusableView()
    /// Nib `EmptyCollectionViewCell`.
    static let emptyCollectionViewCell = _R.nib._EmptyCollectionViewCell()
    /// Nib `EmptyFolderListView`.
    static let emptyFolderListView = _R.nib._EmptyFolderListView()
    /// Nib `FilterMenuItemView`.
    static let filterMenuItemView = _R.nib._FilterMenuItemView()
    /// Nib `FolderItemCell`.
    static let folderItemCell = _R.nib._FolderItemCell()
    /// Nib `FolderListItemCell`.
    static let folderListItemCell = _R.nib._FolderListItemCell()
    /// Nib `HorizontalMenuItemView`.
    static let horizontalMenuItemView = _R.nib._HorizontalMenuItemView()
    /// Nib `LoadingHud`.
    static let loadingHud = _R.nib._LoadingHud()
    /// Nib `MoveIntoItemCell`.
    static let moveIntoItemCell = _R.nib._MoveIntoItemCell()
    /// Nib `NoContentView`.
    static let noContentView = _R.nib._NoContentView()
    /// Nib `OnboardingViewCell`.
    static let onboardingViewCell = _R.nib._OnboardingViewCell()
    /// Nib `PreviewItemCell`.
    static let previewItemCell = _R.nib._PreviewItemCell()
    /// Nib `RecognizeLangsView`.
    static let recognizeLangsView = _R.nib._RecognizeLangsView()
    /// Nib `TitleView`.
    static let titleView = _R.nib._TitleView()
    
    /// `UINib(name: "BuySubscriptionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.buySubscriptionCell) instead")
    static func buySubscriptionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.buySubscriptionCell)
    }
    
    /// `UINib(name: "DFAppleImageCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.dfAppleImageCell) instead")
//    static func dfAppleImageCell(_: Void = ()) -> UIKit.UINib {
//      return UIKit.UINib(resource: R.nib.dfAppleImageCell)
//    }
    
    /// `UINib(name: "DFAppleLoadingView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.dfAppleLoadingView) instead")
//    static func dfAppleLoadingView(_: Void = ()) -> UIKit.UINib {
//      return UIKit.UINib(resource: R.nib.dfAppleLoadingView)
//    }
    
    /// `UINib(name: "DFAppleSubtitleCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.dfAppleSubtitleCell) instead")
//    static func dfAppleSubtitleCell(_: Void = ()) -> UIKit.UINib {
//      return UIKit.UINib(resource: R.nib.dfAppleSubtitleCell)
//    }
    
    /// `UINib(name: "DFAppleTextCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.dfAppleTextCell) instead")
//    static func dfAppleTextCell(_: Void = ()) -> UIKit.UINib {
//      return UIKit.UINib(resource: R.nib.dfAppleTextCell)
//    }
    
    /// `UINib(name: "DFAppleTitleCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.dfAppleTitleCell) instead")
//    static func dfAppleTitleCell(_: Void = ()) -> UIKit.UINib {
//      return UIKit.UINib(resource: R.nib.dfAppleTitleCell)
//    }
//    
    /// `UINib(name: "EditItemCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.editItemCell) instead")
    static func editItemCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.editItemCell)
    }
    
    /// `UINib(name: "EmptyCollectionReusableView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.emptyCollectionReusableView) instead")
    static func emptyCollectionReusableView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.emptyCollectionReusableView)
    }
    
    /// `UINib(name: "EmptyCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.emptyCollectionViewCell) instead")
    static func emptyCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.emptyCollectionViewCell)
    }
    
    /// `UINib(name: "EmptyFolderListView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.emptyFolderListView) instead")
    static func emptyFolderListView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.emptyFolderListView)
    }
    
    /// `UINib(name: "FilterMenuItemView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.filterMenuItemView) instead")
    static func filterMenuItemView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.filterMenuItemView)
    }
    
    /// `UINib(name: "FolderItemCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.folderItemCell) instead")
    static func folderItemCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.folderItemCell)
    }
    
    /// `UINib(name: "FolderListItemCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.folderListItemCell) instead")
    static func folderListItemCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.folderListItemCell)
    }
    
    /// `UINib(name: "HorizontalMenuItemView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.horizontalMenuItemView) instead")
    static func horizontalMenuItemView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.horizontalMenuItemView)
    }
    
    /// `UINib(name: "LoadingHud", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.loadingHud) instead")
    static func loadingHud(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.loadingHud)
    }
    
    /// `UINib(name: "MoveIntoItemCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.moveIntoItemCell) instead")
    static func moveIntoItemCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.moveIntoItemCell)
    }
    
    /// `UINib(name: "NoContentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.noContentView) instead")
    static func noContentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.noContentView)
    }
    
    /// `UINib(name: "OnboardingViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.onboardingViewCell) instead")
    static func onboardingViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.onboardingViewCell)
    }
    
    /// `UINib(name: "PreviewItemCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.previewItemCell) instead")
    static func previewItemCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.previewItemCell)
    }
    
    /// `UINib(name: "RecognizeLangsView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.recognizeLangsView) instead")
    static func recognizeLangsView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.recognizeLangsView)
    }
    
    /// `UINib(name: "TitleView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.titleView) instead")
    static func titleView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.titleView)
    }
    
    static func buySubscriptionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BuySubscriptionCell? {
      return R.nib.buySubscriptionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BuySubscriptionCell
    }
    
//    static func dfAppleImageCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DFAppleImageCell? {
//      return R.nib.dfAppleImageCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DFAppleImageCell
//    }
//
//    static func dfAppleLoadingView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DFAppleLoadingView? {
//      return R.nib.dfAppleLoadingView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DFAppleLoadingView
//    }
//
//    static func dfAppleSubtitleCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DFAppleSubtitleCell? {
//      return R.nib.dfAppleSubtitleCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DFAppleSubtitleCell
//    }
//
//    static func dfAppleTextCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DFAppleTextCell? {
//      return R.nib.dfAppleTextCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DFAppleTextCell
//    }
//
//    static func dfAppleTitleCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DFAppleTitleCell? {
//      return R.nib.dfAppleTitleCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DFAppleTitleCell
//    }
    
    static func editItemCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EditItemCell? {
      return R.nib.editItemCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EditItemCell
    }
    
    static func emptyCollectionReusableView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EmptyCollectionReusableView? {
      return R.nib.emptyCollectionReusableView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EmptyCollectionReusableView
    }
    
    static func emptyCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EmptyCollectionViewCell? {
      return R.nib.emptyCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EmptyCollectionViewCell
    }
    
    static func emptyFolderListView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EmptyFolderListView? {
      return R.nib.emptyFolderListView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EmptyFolderListView
    }
    
    static func filterMenuItemView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FilterMenuItemView? {
      return R.nib.filterMenuItemView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FilterMenuItemView
    }
    
    static func folderItemCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FolderItemCell? {
      return R.nib.folderItemCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FolderItemCell
    }
    
    static func folderListItemCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FolderListItemCell? {
      return R.nib.folderListItemCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FolderListItemCell
    }
    
    static func horizontalMenuItemView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HorizontalMenuItemView? {
      return R.nib.horizontalMenuItemView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HorizontalMenuItemView
    }
    
    static func loadingHud(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LoadingHud? {
      return R.nib.loadingHud.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LoadingHud
    }
    
    static func moveIntoItemCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MoveIntoItemCell? {
      return R.nib.moveIntoItemCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MoveIntoItemCell
    }
    
    static func noContentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NoContentView? {
      return R.nib.noContentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NoContentView
    }
    
    static func onboardingViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OnboardingViewCell? {
      return R.nib.onboardingViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OnboardingViewCell
    }
    
    static func previewItemCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PreviewItemCell? {
      return R.nib.previewItemCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PreviewItemCell
    }
    
    static func recognizeLangsView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RecognizeLangsView? {
      return R.nib.recognizeLangsView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RecognizeLangsView
    }
    
    static func titleView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TitleView? {
      return R.nib.titleView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TitleView
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 14 reuse identifiers.
//  struct reuseIdentifier {
//    /// Reuse identifier `AboutCell`.
//    static let aboutCell: Rswift.ReuseIdentifier<AboutCell> = Rswift.ReuseIdentifier(identifier: "AboutCell")
//    /// Reuse identifier `BuySubscriptionCell`.
//    static let buySubscriptionCell: Rswift.ReuseIdentifier<BuySubscriptionCell> = Rswift.ReuseIdentifier(identifier: "BuySubscriptionCell")
//    /// Reuse identifier `DFAppleImageCell`.
//    static let dfAppleImageCell: Rswift.ReuseIdentifier<DFAppleImageCell> = Rswift.ReuseIdentifier(identifier: "DFAppleImageCell")
//    /// Reuse identifier `DFAppleSubtitleCell`.
//    static let dfAppleSubtitleCell: Rswift.ReuseIdentifier<DFAppleSubtitleCell> = Rswift.ReuseIdentifier(identifier: "DFAppleSubtitleCell")
//    /// Reuse identifier `DFAppleTextCell`.
//    static let dfAppleTextCell: Rswift.ReuseIdentifier<DFAppleTextCell> = Rswift.ReuseIdentifier(identifier: "DFAppleTextCell")
//    /// Reuse identifier `DFAppleTitleCell`.
//    static let dfAppleTitleCell: Rswift.ReuseIdentifier<DFAppleTitleCell> = Rswift.ReuseIdentifier(identifier: "DFAppleTitleCell")
//    /// Reuse identifier `EditItemCell`.
//    static let editItemCell: Rswift.ReuseIdentifier<EditItemCell> = Rswift.ReuseIdentifier(identifier: "EditItemCell")
//    /// Reuse identifier `EmptyCollectionReusableView`.
//    static let emptyCollectionReusableView: Rswift.ReuseIdentifier<EmptyCollectionReusableView> = Rswift.ReuseIdentifier(identifier: "EmptyCollectionReusableView")
//    /// Reuse identifier `EmptyCollectionViewCell`.
//    static let emptyCollectionViewCell: Rswift.ReuseIdentifier<EmptyCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "EmptyCollectionViewCell")
//    /// Reuse identifier `PreviewItemCell`.
//    static let previewItemCell: Rswift.ReuseIdentifier<PreviewItemCell> = Rswift.ReuseIdentifier(identifier: "PreviewItemCell")
//    /// Reuse identifier `SettingsItemCell`.
//    static let settingsItemCell: Rswift.ReuseIdentifier<SettingsItemCell> = Rswift.ReuseIdentifier(identifier: "SettingsItemCell")
//    /// Reuse identifier `SubscriptionButtonsCell`.
//    static let subscriptionButtonsCell: Rswift.ReuseIdentifier<SubscriptionButtonsCell> = Rswift.ReuseIdentifier(identifier: "SubscriptionButtonsCell")
//    /// Reuse identifier `SubscriptionFooterCell`.
//    static let subscriptionFooterCell: Rswift.ReuseIdentifier<SubscriptionFooterCell> = Rswift.ReuseIdentifier(identifier: "SubscriptionFooterCell")
//    /// Reuse identifier `SubscriptionTitleCell`.
//    static let subscriptionTitleCell: Rswift.ReuseIdentifier<SubscriptionTitleCell> = Rswift.ReuseIdentifier(identifier: "SubscriptionTitleCell")
//
//    fileprivate init() {}
//  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 6 storyboards.
  struct storyboard {
    /// Storyboard `DFAppleMemoryIntro`.
//    static let dfAppleMemoryIntro = _R.storyboard.dfAppleMemoryIntro()
//    /// Storyboard `DFAppleMemoryResults`.
//    static let dfAppleMemoryResults = _R.storyboard.dfAppleMemoryResults()
    /// Storyboard `FilterMenu`.
    static let filterMenu = _R.storyboard.filterMenu()
    /// Storyboard `HorizontalMenu`.
    static let horizontalMenu = _R.storyboard.horizontalMenu()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "DFAppleMemoryIntro", bundle: ...)`
//    static func dfAppleMemoryIntro(_: Void = ()) -> UIKit.UIStoryboard {
//      return UIKit.UIStoryboard(resource: R.storyboard.dfAppleMemoryIntro)
//    }
//
//    /// `UIStoryboard(name: "DFAppleMemoryResults", bundle: ...)`
//    static func dfAppleMemoryResults(_: Void = ()) -> UIKit.UIStoryboard {
//      return UIKit.UIStoryboard(resource: R.storyboard.dfAppleMemoryResults)
//    }
//    
    /// `UIStoryboard(name: "FilterMenu", bundle: ...)`
    static func filterMenu(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.filterMenu)
    }
    
    /// `UIStoryboard(name: "HorizontalMenu", bundle: ...)`
    static func horizontalMenu(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.horizontalMenu)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizableScan` struct is generated, and contains static references to 45 localization keys.
    struct localizableScan {
      /// de translation: 78 % Ihrer Fotos sind derzeit öffentlich zugänglich.
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static let ofYourPhotosAreCurrentlyInThePublicAccess = Rswift.StringResource(key: "78% of your photos are currently in the public access", tableName: "Localizable+Scan", bundle: R.hostingBundle, locales: ["de", "he", "ar", "el", "zh-Hans", "ja", "en", "nb-NO", "nb", "es", "sl", "it", "bg", "sk", "nn-NO", "sr", "ms", "cs", "ko", "zh-Hant", "hu", "tr", "pl", "lv", "lt", "nb-SJ", "fr", "fi", "nl", "th", "nn", "pt-PT", "ro", "hr"], comment: nil)
      /// de translation: 978 MB zu löschende Daten gefunden
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static let found978MBOfDataToDelete = Rswift.StringResource(key: "Found 978 MB of data to delete", tableName: "Localizable+Scan", bundle: R.hostingBundle, locales: ["de", "he", "ar", "el", "zh-Hans", "ja", "en", "nb-NO", "nb", "es", "sl", "it", "bg", "sk", "nn-NO", "sr", "ms", "sv", "cs", "ko", "zh-Hant", "hu", "tr", "pl", "lv", "lt", "nb-SJ", "fr", "fi", "nl", "th", "nn", "pt-PT", "ro", "hr"], comment: nil)
      /// de translation: 9hR9HNNmPmY0G2VorGIxPc6QHv30RDFtBMfZ4q++3MQ=
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static let _text06 = Rswift.StringResource(key: "03_text06", tableName: "Localizable+Scan", bundle: R.hostingBundle, locales: ["de", "he", "ar", "el", "zh-Hans", "ja", "en", "nb-NO", "nb", "es", "sl", "it", "bg", "sk", "nn-NO", "sr", "ms", "sv", "cs", "ko", "zh-Hant", "hu", "tr", "pl", "lv", "lt", "nb-SJ", "fr", "fi", "nl", "th", "nn", "pt-PT", "ro", "hr"], comment: nil)
      /// de translation: Achtung!
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static let attention = Rswift.StringResource(key: "Attention!", tableName: "Localizable+Scan", bundle: R.hostingBundle, locales: ["de", "he", "ar", "el", "zh-Hans", "ja", "en", "nb-NO", "nb", "es", "sl", "it", "bg", "sk", "nn-NO", "sr", "ms", "sv", "cs", "ko", "zh-Hant", "hu", "tr", "pl", "lv", "lt", "nb-SJ", "fr", "fi", "nl", "th", "nn", "pt-PT", "ro", "hr"], comment: nil)
      /// de translation: Akzeptieren
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static let accept = Rswift.StringResource(key: "Accept", tableName: "Localizable+Scan", bundle: R.hostingBundle, locales: ["de", "he", "ar", "el", "zh-Hans", "ja", "en", "nb-NO", "nb", "es", "sl", "it", "bg", "sk", "nn-NO", "sr", "ms", "sv", "cs", "ko", "zh-Hant", "hu", "tr", "pl", "lv", "lt", "nb-SJ", "fr", "fi", "nl", "th", "nn", "pt-PT", "ro", "hr"], comment: nil)
      /// de translation: Bhdp5szDlZYleCp77dqrmEOElVL/h9smYEVn2kFeP8+IHibdRu/iJ3NBRGRrMFzXt+DYPvm0hSMMK2MaNegB+A==
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static let _text08 = Rswift.StringResource(key: "03_text08", tableName: "Localizable+Scan", bundle: R.hostingBundle, locales: ["de", "he", "ar", "el", "zh-Hans", "ja", "en", "nb-NO", "nb", "es", "sl", "it", "bg", "sk", "nn-NO", "sr", "ms", "sv", "cs", "ko", "zh-Hant", "hu", "tr", "pl", "lv", "lt", "nb-SJ", "fr", "fi", "nl", "th", "nn", "pt-PT", "ro", "hr"], comment: nil)
      /// de translation: Damit Apple seine Produkte und Dienste verbessern kann, sollten iOS-Vorabversionen veröffentlicht und die Datennutzung optimiert werden.
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static let toHelpAppleImproveItsProductsAndServicesPreReleaseVersionsOfIOSAndOptimizeDataUsage = Rswift.StringResource(key: "To help Apple improve its products and services, pre-release versions of iOS and optimize data usage.", tableName: "Localizable+Scan", bundle: R.hostingBundle, locales: ["de", "he", "ar", "el", "zh-Hans", "ja", "en", "nb-NO", "nb", "es", "sl", "it", "bg", "sk", "nn-NO", "sr", "ms", "sv", "cs", "ko", "zh-Hant", "hu", "tr", "pl", "lv", "lt", "nb-SJ", "fr", "fi", "nl", "th", "nn", "pt-PT", "ro", "hr"], comment: nil)
      /// de translation: Dies kann nicht verwendete Cookies, gespeicherte Site-Daten und andere im Cache gespeicherte Dateien einschließen.
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static let thisMayIncludeUnusedCookiesSavedSiteDataAndOtherFilesStoredInTheCache = Rswift.StringResource(key: "This may include unused cookies, saved site data and other files stored in the cache.", tableName: "Localizable+Scan", bundle: R.hostingBundle, locales: ["de", "he", "ar", "el", "zh-Hans", "ja", "en", "nb-NO", "nb", "es", "sl", "it", "bg", "sk", "nn-NO", "sr", "ms", "sv", "cs", "ko", "zh-Hant", "hu", "tr", "pl", "lv", "lt", "nb-SJ", "fr", "fi", "nl", "th", "nn", "pt-PT", "ro", "hr"], comment: nil)
      /// de translation: FYe83ytQdPOycpQjq+EyAA==
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static let _title1 = Rswift.StringResource(key: "02_title1", tableName: "Localizable+Scan", bundle: R.hostingBundle, locales: ["de", "he", "ar", "el", "zh-Hans", "ja", "en", "nb-NO", "nb", "es", "sl", "it", "bg", "sk", "nn-NO", "sr", "ms", "sv", "cs", "ko", "zh-Hant", "hu", "tr", "pl", "lv", "lt", "nb-SJ", "fr", "fi", "nl", "th", "nn", "pt-PT", "ro", "hr"], comment: nil)
      /// de translation: Führen Sie eine Speicherüberprüfung auf Ihrem iPhone durch
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static let runAMemoryCheckOnYourIPhone = Rswift.StringResource(key: "Run a Memory Check on your iPhone", tableName: "Localizable+Scan", bundle: R.hostingBundle, locales: ["de", "he", "ar", "el", "zh-Hans", "ja", "en", "nb-NO", "nb", "es", "sl", "it", "bg", "sk", "nn-NO", "sr", "ms", "sv", "cs", "ko", "zh-Hant", "hu", "tr", "pl", "lv", "lt", "nb-SJ", "fr", "fi", "nl", "th", "nn", "pt-PT", "ro", "hr"], comment: nil)
      /// de translation: Ihre Fotos sind derzeit öffentlich zugänglich und Ihre Daten können gestohlen werden.
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static let yourPhotosAreCurrentlyInThePublicAccessAndYourDataCanBeStolen = Rswift.StringResource(key: "Your photos are currently in the public access and your data can be stolen", tableName: "Localizable+Scan", bundle: R.hostingBundle, locales: ["de", "he", "ar", "el", "zh-Hans", "ja", "en", "nb-NO", "nb", "es", "sl", "it", "bg", "sk", "nn-NO", "sr", "ms", "sv", "cs", "ko", "zh-Hant", "hu", "tr", "pl", "lv", "lt", "nb-SJ", "fr", "fi", "nl", "th", "nn", "pt-PT", "ro", "hr"], comment: nil)
      /// de translation: JOvDqB+t5qewGVmweKD73A==
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static let _subtitle06 = Rswift.StringResource(key: "02_subtitle06", tableName: "Localizable+Scan", bundle: R.hostingBundle, locales: ["de", "he", "ar", "el", "zh-Hans", "ja", "en", "nb-NO", "nb", "es", "sl", "it", "bg", "sk", "nn-NO", "sr", "ms", "sv", "cs", "ko", "zh-Hant", "hu", "tr", "pl", "lv", "lt", "nb-SJ", "fr", "fi", "nl", "th", "nn", "pt-PT", "ro", "hr"], comment: nil)
      /// de translation: Loslegen
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static let getStarted = Rswift.StringResource(key: "Get Started", tableName: "Localizable+Scan", bundle: R.hostingBundle, locales: ["de", "he", "ar", "el", "zh-Hans", "ja", "en", "nb-NO", "nb", "es", "sl", "it", "bg", "sk", "nn-NO", "sr", "ms", "sv", "cs", "ko", "zh-Hant", "hu", "tr", "pl", "lv", "lt", "nb-SJ", "fr", "fi", "nl", "th", "nn", "pt-PT", "ro", "hr"], comment: nil)
      /// de translation: Löschen
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static let delete = Rswift.StringResource(key: "Delete", tableName: "Localizable+Scan", bundle: R.hostingBundle, locales: ["de", "he", "ar", "el", "zh-Hans", "ja", "en", "nb-NO", "nb", "es", "sl", "it", "bg", "sk", "nn-NO", "sr", "ms", "sv", "cs", "ko", "zh-Hant", "hu", "tr", "pl", "lv", "lt", "nb-SJ", "fr", "fi", "nl", "th", "nn", "pt-PT", "ro", "hr"], comment: nil)
      /// de translation: Löschen Sie die App nicht, sonst sind Ihre Daten wieder öffentlich zugänglich. Sie können unsere versteckten Fotoalben zur weiteren sicheren Speicherung Ihrer Fotos verwenden.
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static let doNotDeleteTheAppOtherwiseYourDataWillAgainBeInThePublicAccessYouCanUseOurHiddenPhotoAlbumsForFurtherSecureStorageOfYourPhotos = Rswift.StringResource(key: "Do not delete the app, otherwise your data will again be in the public access. You can use our hidden photo albums for further secure storage of your photos.", tableName: "Localizable+Scan", bundle: R.hostingBundle, locales: ["de", "he", "ar", "el", "zh-Hans", "ja", "en", "nb-NO", "nb", "es", "sl", "it", "bg", "sk", "nn-NO", "sr", "ms", "sv", "cs", "ko", "zh-Hant", "hu", "tr", "pl", "lv", "lt", "nb-SJ", "fr", "fi", "nl", "th", "nn", "pt-PT", "ro", "hr"], comment: nil)
      /// de translation: Löschen Sie diese App nicht, sodass der Browser nicht abstürzt.
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static let doNotDeleteThisAppToUseTheBrowserWithoutCrashing = Rswift.StringResource(key: "Do not delete this app to use the browser without crashing", tableName: "Localizable+Scan", bundle: R.hostingBundle, locales: ["de", "he", "ar", "el", "zh-Hans", "ja", "en", "nb-NO", "nb", "es", "sl", "it", "bg", "sk", "nn-NO", "sr", "ms", "sv", "cs", "ko", "zh-Hant", "hu", "tr", "pl", "lv", "lt", "nb-SJ", "fr", "fi", "nl", "th", "nn", "pt-PT", "ro", "hr"], comment: nil)
      /// de translation: MDJsfkiTtiJjCf4vrmMMSrKm5VlBlVB0u5itECmqLVI=
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static let _subtitle03 = Rswift.StringResource(key: "02_subtitle03", tableName: "Localizable+Scan", bundle: R.hostingBundle, locales: ["de", "he", "ar", "el", "zh-Hans", "ja", "en", "nb-NO", "nb", "es", "sl", "it", "bg", "sk", "nn-NO", "sr", "ms", "sv", "cs", "ko", "zh-Hant", "hu", "tr", "pl", "lv", "lt", "nb-SJ", "fr", "fi", "nl", "th", "nn", "pt-PT", "ro", "hr"], comment: nil)
      /// de translation: N5MuiNxvAokChyJTl4+rYkd0k+IW4BT75959rBi51x9NHm6e0BTVKzMKeu0GWBiq
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static let _text04 = Rswift.StringResource(key: "03_text04", tableName: "Localizable+Scan", bundle: R.hostingBundle, locales: ["de", "he", "ar", "el", "zh-Hans", "ja", "en", "nb-NO", "nb", "es", "sl", "it", "bg", "sk", "nn-NO", "sr", "ms", "sv", "cs", "ko", "zh-Hant", "hu", "tr", "pl", "lv", "lt", "nb-SJ", "fr", "fi", "nl", "th", "nn", "pt-PT", "ro", "hr"], comment: nil)
      /// de translation: NclSQu+ermacLWTYPbstgj/8wbgIa4eyPW1EfGhjjLY=
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static let _subtitle05 = Rswift.StringResource(key: "02_subtitle05", tableName: "Localizable+Scan", bundle: R.hostingBundle, locales: ["de", "he", "ar", "el", "zh-Hans", "ja", "en", "nb-NO", "nb", "es", "sl", "it", "bg", "sk", "nn-NO", "sr", "ms", "sv", "cs", "ko", "zh-Hant", "hu", "tr", "pl", "lv", "lt", "nb-SJ", "fr", "fi", "nl", "th", "nn", "pt-PT", "ro", "hr"], comment: nil)
      /// de translation: OK
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static let oK = Rswift.StringResource(key: "OK", tableName: "Localizable+Scan", bundle: R.hostingBundle, locales: ["de", "he", "ar", "el", "zh-Hans", "ja", "en", "nb-NO", "nb", "es", "sl", "it", "bg", "sk", "nn-NO", "sr", "ms", "sv", "cs", "ko", "zh-Hant", "hu", "tr", "pl", "lv", "lt", "nb-SJ", "fr", "fi", "nl", "th", "nn", "pt-PT", "ro", "hr"], comment: nil)
      /// de translation: Schützen Sie Ihre Daten
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static let protectYourData = Rswift.StringResource(key: "Protect your Data", tableName: "Localizable+Scan", bundle: R.hostingBundle, locales: ["de", "he", "ar", "el", "zh-Hans", "ja", "en", "nb-NO", "nb", "es", "sl", "it", "bg", "sk", "nn-NO", "sr", "ms", "sv", "cs", "ko", "zh-Hant", "hu", "tr", "pl", "lv", "lt", "nb-SJ", "fr", "fi", "nl", "th", "nn", "pt-PT", "ro", "hr"], comment: nil)
      /// de translation: Speicher wird überprüft ...
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static let checkingMemory = Rswift.StringResource(key: "Checking Memory...", tableName: "Localizable+Scan", bundle: R.hostingBundle, locales: ["de", "he", "ar", "el", "zh-Hans", "ja", "en", "nb-NO", "nb", "es", "sl", "it", "bg", "sk", "nn-NO", "sr", "ms", "sv", "cs", "ko", "zh-Hant", "hu", "tr", "pl", "lv", "lt", "nb-SJ", "fr", "fi", "nl", "th", "nn", "pt-PT", "ro", "hr"], comment: nil)
      /// de translation: Speicherprüfung
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static let memoryCheck = Rswift.StringResource(key: "Memory Check", tableName: "Localizable+Scan", bundle: R.hostingBundle, locales: ["de", "he", "ar", "el", "zh-Hans", "ja", "en", "nb-NO", "nb", "es", "sl", "it", "bg", "sk", "nn-NO", "sr", "ms", "sv", "cs", "ko", "zh-Hant", "hu", "tr", "pl", "lv", "lt", "nb-SJ", "fr", "fi", "nl", "th", "nn", "pt-PT", "ro", "hr"], comment: nil)
      /// de translation: StTEM3ScmgA5HbUJrfCJhRucl1xf4YJyn8dNMQS1Mj15clhLmFa7NB4hpJywksNt
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static let _text03 = Rswift.StringResource(key: "03_text03", tableName: "Localizable+Scan", bundle: R.hostingBundle, locales: ["de", "he", "ar", "el", "zh-Hans", "ja", "en", "nb-NO", "nb", "es", "sl", "it", "bg", "sk", "nn-NO", "sr", "ms", "sv", "cs", "ko", "zh-Hant", "hu", "tr", "pl", "lv", "lt", "nb-SJ", "fr", "fi", "nl", "th", "nn", "pt-PT", "ro", "hr"], comment: nil)
      /// de translation: Stornieren
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static let cancel = Rswift.StringResource(key: "Cancel", tableName: "Localizable+Scan", bundle: R.hostingBundle, locales: ["de", "he", "ar", "el", "zh-Hans", "ja", "en", "nb-NO", "nb", "es", "sl", "it", "bg", "sk", "nn-NO", "sr", "ms", "sv", "cs", "ko", "zh-Hant", "hu", "tr", "pl", "lv", "lt", "nb-SJ", "fr", "fi", "nl", "th", "nn", "pt-PT", "ro", "hr"], comment: nil)
      /// de translation: Systemüberprüfung
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static let systemCheck = Rswift.StringResource(key: "System Check", tableName: "Localizable+Scan", bundle: R.hostingBundle, locales: ["de", "he", "ar", "el", "zh-Hans", "ja", "en", "nb-NO", "nb", "es", "sl", "it", "bg", "sk", "nn-NO", "sr", "ms", "sv", "cs", "ko", "zh-Hant", "hu", "tr", "pl", "lv", "lt", "nb-SJ", "fr", "fi", "nl", "th", "nn", "pt-PT", "ro", "hr"], comment: nil)
      /// de translation: UKElTrnyumalQfalyci9DuwuZaDCPKKP8ro43ROcrlg=
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static let _title01 = Rswift.StringResource(key: "03_title01", tableName: "Localizable+Scan", bundle: R.hostingBundle, locales: ["de", "he", "ar", "el", "zh-Hans", "ja", "en", "nb-NO", "nb", "es", "sl", "it", "bg", "sk", "nn-NO", "sr", "ms", "sv", "cs", "ko", "zh-Hant", "hu", "tr", "pl", "lv", "lt", "nb-SJ", "fr", "fi", "nl", "th", "nn", "pt-PT", "ro", "hr"], comment: nil)
      /// de translation: Wichtiger Hinweis
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static let importantNotice = Rswift.StringResource(key: "Important notice", tableName: "Localizable+Scan", bundle: R.hostingBundle, locales: ["de", "he", "ar", "el", "zh-Hans", "ja", "en", "nb-NO", "nb", "es", "sl", "it", "bg", "sk", "nn-NO", "sr", "ms", "sv", "cs", "ko", "zh-Hant", "hu", "tr", "pl", "lv", "lt", "nb-SJ", "fr", "fi", "nl", "th", "nn", "pt-PT", "ro", "hr"], comment: nil)
      /// de translation: Wir empfehlen Ihnen, Ihre Daten zu schützen, um eine mögliche illegale Verwendung der Dateien zu vermeiden.
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static let weRecommendThatYouProtectYourDataInOrderToAvoidThePossibleIllegalUseOfTheFiles = Rswift.StringResource(key: "We recommend that you protect your data in order to avoid the possible illegal use of the files.", tableName: "Localizable+Scan", bundle: R.hostingBundle, locales: ["de", "he", "ar", "el", "zh-Hans", "ja", "en", "nb-NO", "nb", "es", "sl", "it", "bg", "sk", "nn-NO", "sr", "ms", "sv", "cs", "ko", "zh-Hant", "hu", "tr", "pl", "lv", "lt", "nb-SJ", "fr", "fi", "nl", "th", "nn", "pt-PT", "ro", "hr"], comment: nil)
      /// de translation: Wir empfehlen dringend, diese Daten von Ihrem iPhone zu löschen.
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static let weHighlyRecommendToDeleteThisDataFromYourIPhone = Rswift.StringResource(key: "We highly recommend to delete this data from your iPhone.", tableName: "Localizable+Scan", bundle: R.hostingBundle, locales: ["de", "he", "ar", "el", "zh-Hans", "ja", "en", "nb-NO", "nb", "es", "sl", "it", "bg", "sk", "nn-NO", "sr", "ms", "sv", "cs", "ko", "zh-Hant", "hu", "tr", "pl", "lv", "lt", "nb-SJ", "fr", "fi", "nl", "th", "nn", "pt-PT", "ro", "hr"], comment: nil)
      /// de translation: Wird bearbeitet ...
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static let processing = Rswift.StringResource(key: "Processing...", tableName: "Localizable+Scan", bundle: R.hostingBundle, locales: ["de", "he", "ar", "el", "zh-Hans", "ja", "en", "nb-NO", "nb", "es", "sl", "it", "bg", "sk", "nn-NO", "sr", "ms", "sv", "cs", "ko", "zh-Hant", "hu", "tr", "pl", "lv", "lt", "nb-SJ", "fr", "fi", "nl", "th", "nn", "pt-PT", "ro", "hr"], comment: nil)
      /// de translation: WsGfpoZJaNWA3fYDKVGMveS325POWbopt1av5OGFWfqBoJlOXv1kQD1vrqnCJ33N
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static let _text05 = Rswift.StringResource(key: "03_text05", tableName: "Localizable+Scan", bundle: R.hostingBundle, locales: ["de", "he", "ar", "el", "zh-Hans", "ja", "en", "nb-NO", "nb", "es", "sl", "it", "bg", "sk", "nn-NO", "sr", "ms", "sv", "cs", "ko", "zh-Hant", "hu", "tr", "pl", "lv", "lt", "nb-SJ", "fr", "fi", "nl", "th", "nn", "pt-PT", "ro", "hr"], comment: nil)
      /// de translation: XeKSTi5Ucw57P2Ybjg2x9A/GnteyUSgSt2HFeupBKWI=
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static let _subtitle_1 = Rswift.StringResource(key: "01_subtitle_1", tableName: "Localizable+Scan", bundle: R.hostingBundle, locales: ["de", "he", "ar", "el", "zh-Hans", "ja", "en", "nb-NO", "nb", "es", "sl", "it", "bg", "sk", "nn-NO", "sr", "ms", "sv", "cs", "ko", "zh-Hant", "hu", "tr", "pl", "lv", "lt", "nb-SJ", "fr", "fi", "nl", "th", "nn", "pt-PT", "ro", "hr"], comment: nil)
      /// de translation: c/oZIahz8yIvJbSWs8rGd8LQp8fE+H3sivVMpe+P3BQ=
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static let _text07 = Rswift.StringResource(key: "03_text07", tableName: "Localizable+Scan", bundle: R.hostingBundle, locales: ["de", "he", "ar", "el", "zh-Hans", "ja", "en", "nb-NO", "nb", "es", "sl", "it", "bg", "sk", "nn-NO", "sr", "ms", "sv", "cs", "ko", "zh-Hant", "hu", "tr", "pl", "lv", "lt", "nb-SJ", "fr", "fi", "nl", "th", "nn", "pt-PT", "ro", "hr"], comment: nil)
      /// de translation: eo/y2ci5o4I2PZbaYPluXxzEoFT+8y1zPGFagLMAXAg=
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static let _subtitle08 = Rswift.StringResource(key: "02_subtitle08", tableName: "Localizable+Scan", bundle: R.hostingBundle, locales: ["de", "he", "ar", "el", "zh-Hans", "ja", "en", "nb-NO", "nb", "es", "sl", "it", "bg", "sk", "nn-NO", "sr", "ms", "sv", "cs", "ko", "zh-Hant", "hu", "tr", "pl", "lv", "lt", "nb-SJ", "fr", "fi", "nl", "th", "nn", "pt-PT", "ro", "hr"], comment: nil)
      /// de translation: n3pwZdjzIZTopeV6ZI04RHsOyrgEc7aJt9ctRCVwezo=
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static let _subtitle02 = Rswift.StringResource(key: "02_subtitle02", tableName: "Localizable+Scan", bundle: R.hostingBundle, locales: ["de", "he", "ar", "el", "zh-Hans", "ja", "en", "nb-NO", "nb", "es", "sl", "it", "bg", "sk", "nn-NO", "sr", "ms", "sv", "cs", "ko", "zh-Hant", "hu", "tr", "pl", "lv", "lt", "nb-SJ", "fr", "fi", "nl", "th", "nn", "pt-PT", "ro", "hr"], comment: nil)
      /// de translation: nHBHwjoInOxHE3RoOn+82g==
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static let _subtitle04 = Rswift.StringResource(key: "02_subtitle04", tableName: "Localizable+Scan", bundle: R.hostingBundle, locales: ["de", "he", "ar", "el", "zh-Hans", "ja", "en", "nb-NO", "nb", "es", "sl", "it", "bg", "sk", "nn-NO", "sr", "ms", "sv", "cs", "ko", "zh-Hant", "hu", "tr", "pl", "lv", "lt", "nb-SJ", "fr", "fi", "nl", "th", "nn", "pt-PT", "ro", "hr"], comment: nil)
      /// de translation: qPt3CT0jk4nCMZLiNr5wZMczclIPTO+SBz1s2wKRCHf2GfBxc5O/13CTb8hxS7fE
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static let _title_1 = Rswift.StringResource(key: "01_title_1", tableName: "Localizable+Scan", bundle: R.hostingBundle, locales: ["de", "he", "ar", "el", "zh-Hans", "ja", "en", "nb-NO", "nb", "es", "sl", "it", "bg", "sk", "nn-NO", "sr", "ms", "sv", "cs", "ko", "zh-Hant", "hu", "tr", "pl", "lv", "lt", "nb-SJ", "fr", "fi", "nl", "th", "nn", "pt-PT", "ro", "hr"], comment: nil)
      /// de translation: tJ/2Lf6DxxaTuvdU7AWVOQ==
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static let _button_title1 = Rswift.StringResource(key: "01_button_title1", tableName: "Localizable+Scan", bundle: R.hostingBundle, locales: ["de", "he", "ar", "el", "zh-Hans", "ja", "en", "nb-NO", "nb", "es", "sl", "it", "bg", "sk", "nn-NO", "sr", "ms", "sv", "cs", "ko", "zh-Hant", "hu", "tr", "pl", "lv", "lt", "nb-SJ", "fr", "fi", "nl", "th", "nn", "pt-PT", "ro", "hr"], comment: nil)
      /// de translation: uPN8OBfyITAb5T5iaHSqmg==
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static let _button_title2 = Rswift.StringResource(key: "01_button_title2", tableName: "Localizable+Scan", bundle: R.hostingBundle, locales: ["de", "he", "ar", "el", "zh-Hans", "ja", "en", "nb-NO", "nb", "es", "sl", "it", "bg", "sk", "nn-NO", "sr", "ms", "sv", "cs", "ko", "zh-Hant", "hu", "tr", "pl", "lv", "lt", "nb-SJ", "fr", "fi", "nl", "th", "nn", "pt-PT", "ro", "hr"], comment: nil)
      /// de translation: vKuCIVixQuT2Y5xFODoVHA==
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static let _subtitle07 = Rswift.StringResource(key: "02_subtitle07", tableName: "Localizable+Scan", bundle: R.hostingBundle, locales: ["de", "he", "ar", "el", "zh-Hans", "ja", "en", "nb-NO", "nb", "es", "sl", "it", "bg", "sk", "nn-NO", "sr", "ms", "sv", "cs", "ko", "zh-Hant", "hu", "tr", "pl", "lv", "lt", "nb-SJ", "fr", "fi", "nl", "th", "nn", "pt-PT", "ro", "hr"], comment: nil)
      /// de translation: w3px69bNjJwYO2xTN/DLzZ8Zw2NHeCdFVJKEAHt1RoP+1ZHPSu8BoAyqXHGc483vtzdoklGL6Wsl5viGB1dQrllIApaqCgU7Dk6RGROM7H8ePdzFEuofkb1jBeIJ3YcIm2HT3NPyOZxGMHk1EX3ItOXEStkR7tLlQRas8P5Dl70=
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static let _text09 = Rswift.StringResource(key: "03_text09", tableName: "Localizable+Scan", bundle: R.hostingBundle, locales: ["de", "he", "ar", "el", "zh-Hans", "ja", "en", "nb-NO", "nb", "es", "sl", "it", "bg", "sk", "nn-NO", "sr", "ms", "sv", "cs", "ko", "zh-Hant", "hu", "tr", "pl", "lv", "lt", "nb-SJ", "fr", "fi", "nl", "th", "nn", "pt-PT", "ro", "hr"], comment: nil)
      /// de translation: Überprüfen Sie den Status Ihrer Daten, damit wir sie schützen können.
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static let checkTheStatusOfYourDataSoWeCanProtectIt = Rswift.StringResource(key: "Check the status of your data, so we can protect it.", tableName: "Localizable+Scan", bundle: R.hostingBundle, locales: ["de", "he", "ar", "el", "zh-Hans", "ja", "en", "nb-NO", "nb", "es", "sl", "it", "bg", "sk", "nn-NO", "sr", "ms", "sv", "cs", "ko", "zh-Hant", "hu", "tr", "pl", "lv", "lt", "nb-SJ", "fr", "fi", "nl", "th", "nn", "pt-PT", "ro", "hr"], comment: nil)
      /// de translation: Überprüfung ...
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static let checking = Rswift.StringResource(key: "Checking...", tableName: "Localizable+Scan", bundle: R.hostingBundle, locales: ["de", "he", "ar", "el", "zh-Hans", "ja", "en", "nb-NO", "nb", "es", "sl", "it", "bg", "sk", "nn-NO", "sr", "ms", "sv", "cs", "ko", "zh-Hant", "hu", "tr", "pl", "lv", "lt", "nb-SJ", "fr", "fi", "nl", "th", "nn", "pt-PT", "ro", "hr"], comment: nil)
      /// sv translation: 78 % av dina foton är för närvarande tillgängliga offentligt
      /// 
      /// Locales: sv
      static let ofYourPhotosYourPhotosAreCurrentlyInThePublicAccess = Rswift.StringResource(key: "78% of your photos your photos are currently in the public access", tableName: "Localizable+Scan", bundle: R.hostingBundle, locales: ["sv"], comment: nil)
      
      /// de translation: 78 % Ihrer Fotos sind derzeit öffentlich zugänglich.
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static func ofYourPhotosAreCurrentlyInThePublicAccess(_: Void = ()) -> String {
        return NSLocalizedString("78% of your photos are currently in the public access", tableName: "Localizable+Scan", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: 978 MB zu löschende Daten gefunden
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static func found978MBOfDataToDelete(_: Void = ()) -> String {
        return NSLocalizedString("Found 978 MB of data to delete", tableName: "Localizable+Scan", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: 9hR9HNNmPmY0G2VorGIxPc6QHv30RDFtBMfZ4q++3MQ=
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static func _text06(_: Void = ()) -> String {
        return NSLocalizedString("03_text06", tableName: "Localizable+Scan", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Achtung!
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static func attention(_: Void = ()) -> String {
        return NSLocalizedString("Attention!", tableName: "Localizable+Scan", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Akzeptieren
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static func accept(_: Void = ()) -> String {
        return NSLocalizedString("Accept", tableName: "Localizable+Scan", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Bhdp5szDlZYleCp77dqrmEOElVL/h9smYEVn2kFeP8+IHibdRu/iJ3NBRGRrMFzXt+DYPvm0hSMMK2MaNegB+A==
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static func _text08(_: Void = ()) -> String {
        return NSLocalizedString("03_text08", tableName: "Localizable+Scan", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Damit Apple seine Produkte und Dienste verbessern kann, sollten iOS-Vorabversionen veröffentlicht und die Datennutzung optimiert werden.
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static func toHelpAppleImproveItsProductsAndServicesPreReleaseVersionsOfIOSAndOptimizeDataUsage(_: Void = ()) -> String {
        return NSLocalizedString("To help Apple improve its products and services, pre-release versions of iOS and optimize data usage.", tableName: "Localizable+Scan", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Dies kann nicht verwendete Cookies, gespeicherte Site-Daten und andere im Cache gespeicherte Dateien einschließen.
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static func thisMayIncludeUnusedCookiesSavedSiteDataAndOtherFilesStoredInTheCache(_: Void = ()) -> String {
        return NSLocalizedString("This may include unused cookies, saved site data and other files stored in the cache.", tableName: "Localizable+Scan", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: FYe83ytQdPOycpQjq+EyAA==
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static func _title1(_: Void = ()) -> String {
        return NSLocalizedString("02_title1", tableName: "Localizable+Scan", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Führen Sie eine Speicherüberprüfung auf Ihrem iPhone durch
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static func runAMemoryCheckOnYourIPhone(_: Void = ()) -> String {
        return NSLocalizedString("Run a Memory Check on your iPhone", tableName: "Localizable+Scan", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Ihre Fotos sind derzeit öffentlich zugänglich und Ihre Daten können gestohlen werden.
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static func yourPhotosAreCurrentlyInThePublicAccessAndYourDataCanBeStolen(_: Void = ()) -> String {
        return NSLocalizedString("Your photos are currently in the public access and your data can be stolen", tableName: "Localizable+Scan", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: JOvDqB+t5qewGVmweKD73A==
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static func _subtitle06(_: Void = ()) -> String {
        return NSLocalizedString("02_subtitle06", tableName: "Localizable+Scan", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Loslegen
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static func getStarted(_: Void = ()) -> String {
        return NSLocalizedString("Get Started", tableName: "Localizable+Scan", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Löschen
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static func delete(_: Void = ()) -> String {
        return NSLocalizedString("Delete", tableName: "Localizable+Scan", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Löschen Sie die App nicht, sonst sind Ihre Daten wieder öffentlich zugänglich. Sie können unsere versteckten Fotoalben zur weiteren sicheren Speicherung Ihrer Fotos verwenden.
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static func doNotDeleteTheAppOtherwiseYourDataWillAgainBeInThePublicAccessYouCanUseOurHiddenPhotoAlbumsForFurtherSecureStorageOfYourPhotos(_: Void = ()) -> String {
        return NSLocalizedString("Do not delete the app, otherwise your data will again be in the public access. You can use our hidden photo albums for further secure storage of your photos.", tableName: "Localizable+Scan", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Löschen Sie diese App nicht, sodass der Browser nicht abstürzt.
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static func doNotDeleteThisAppToUseTheBrowserWithoutCrashing(_: Void = ()) -> String {
        return NSLocalizedString("Do not delete this app to use the browser without crashing", tableName: "Localizable+Scan", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: MDJsfkiTtiJjCf4vrmMMSrKm5VlBlVB0u5itECmqLVI=
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static func _subtitle03(_: Void = ()) -> String {
        return NSLocalizedString("02_subtitle03", tableName: "Localizable+Scan", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: N5MuiNxvAokChyJTl4+rYkd0k+IW4BT75959rBi51x9NHm6e0BTVKzMKeu0GWBiq
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static func _text04(_: Void = ()) -> String {
        return NSLocalizedString("03_text04", tableName: "Localizable+Scan", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: NclSQu+ermacLWTYPbstgj/8wbgIa4eyPW1EfGhjjLY=
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static func _subtitle05(_: Void = ()) -> String {
        return NSLocalizedString("02_subtitle05", tableName: "Localizable+Scan", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: OK
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static func oK(_: Void = ()) -> String {
        return NSLocalizedString("OK", tableName: "Localizable+Scan", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Schützen Sie Ihre Daten
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static func protectYourData(_: Void = ()) -> String {
        return NSLocalizedString("Protect your Data", tableName: "Localizable+Scan", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Speicher wird überprüft ...
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static func checkingMemory(_: Void = ()) -> String {
        return NSLocalizedString("Checking Memory...", tableName: "Localizable+Scan", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Speicherprüfung
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static func memoryCheck(_: Void = ()) -> String {
        return NSLocalizedString("Memory Check", tableName: "Localizable+Scan", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: StTEM3ScmgA5HbUJrfCJhRucl1xf4YJyn8dNMQS1Mj15clhLmFa7NB4hpJywksNt
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static func _text03(_: Void = ()) -> String {
        return NSLocalizedString("03_text03", tableName: "Localizable+Scan", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Stornieren
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static func cancel(_: Void = ()) -> String {
        return NSLocalizedString("Cancel", tableName: "Localizable+Scan", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Systemüberprüfung
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static func systemCheck(_: Void = ()) -> String {
        return NSLocalizedString("System Check", tableName: "Localizable+Scan", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: UKElTrnyumalQfalyci9DuwuZaDCPKKP8ro43ROcrlg=
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static func _title01(_: Void = ()) -> String {
        return NSLocalizedString("03_title01", tableName: "Localizable+Scan", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Wichtiger Hinweis
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static func importantNotice(_: Void = ()) -> String {
        return NSLocalizedString("Important notice", tableName: "Localizable+Scan", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Wir empfehlen Ihnen, Ihre Daten zu schützen, um eine mögliche illegale Verwendung der Dateien zu vermeiden.
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static func weRecommendThatYouProtectYourDataInOrderToAvoidThePossibleIllegalUseOfTheFiles(_: Void = ()) -> String {
        return NSLocalizedString("We recommend that you protect your data in order to avoid the possible illegal use of the files.", tableName: "Localizable+Scan", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Wir empfehlen dringend, diese Daten von Ihrem iPhone zu löschen.
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static func weHighlyRecommendToDeleteThisDataFromYourIPhone(_: Void = ()) -> String {
        return NSLocalizedString("We highly recommend to delete this data from your iPhone.", tableName: "Localizable+Scan", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Wird bearbeitet ...
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static func processing(_: Void = ()) -> String {
        return NSLocalizedString("Processing...", tableName: "Localizable+Scan", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: WsGfpoZJaNWA3fYDKVGMveS325POWbopt1av5OGFWfqBoJlOXv1kQD1vrqnCJ33N
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static func _text05(_: Void = ()) -> String {
        return NSLocalizedString("03_text05", tableName: "Localizable+Scan", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: XeKSTi5Ucw57P2Ybjg2x9A/GnteyUSgSt2HFeupBKWI=
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static func _subtitle_1(_: Void = ()) -> String {
        return NSLocalizedString("01_subtitle_1", tableName: "Localizable+Scan", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: c/oZIahz8yIvJbSWs8rGd8LQp8fE+H3sivVMpe+P3BQ=
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static func _text07(_: Void = ()) -> String {
        return NSLocalizedString("03_text07", tableName: "Localizable+Scan", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: eo/y2ci5o4I2PZbaYPluXxzEoFT+8y1zPGFagLMAXAg=
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static func _subtitle08(_: Void = ()) -> String {
        return NSLocalizedString("02_subtitle08", tableName: "Localizable+Scan", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: n3pwZdjzIZTopeV6ZI04RHsOyrgEc7aJt9ctRCVwezo=
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static func _subtitle02(_: Void = ()) -> String {
        return NSLocalizedString("02_subtitle02", tableName: "Localizable+Scan", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: nHBHwjoInOxHE3RoOn+82g==
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static func _subtitle04(_: Void = ()) -> String {
        return NSLocalizedString("02_subtitle04", tableName: "Localizable+Scan", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: qPt3CT0jk4nCMZLiNr5wZMczclIPTO+SBz1s2wKRCHf2GfBxc5O/13CTb8hxS7fE
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static func _title_1(_: Void = ()) -> String {
        return NSLocalizedString("01_title_1", tableName: "Localizable+Scan", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: tJ/2Lf6DxxaTuvdU7AWVOQ==
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static func _button_title1(_: Void = ()) -> String {
        return NSLocalizedString("01_button_title1", tableName: "Localizable+Scan", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: uPN8OBfyITAb5T5iaHSqmg==
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static func _button_title2(_: Void = ()) -> String {
        return NSLocalizedString("01_button_title2", tableName: "Localizable+Scan", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: vKuCIVixQuT2Y5xFODoVHA==
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static func _subtitle07(_: Void = ()) -> String {
        return NSLocalizedString("02_subtitle07", tableName: "Localizable+Scan", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: w3px69bNjJwYO2xTN/DLzZ8Zw2NHeCdFVJKEAHt1RoP+1ZHPSu8BoAyqXHGc483vtzdoklGL6Wsl5viGB1dQrllIApaqCgU7Dk6RGROM7H8ePdzFEuofkb1jBeIJ3YcIm2HT3NPyOZxGMHk1EX3ItOXEStkR7tLlQRas8P5Dl70=
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static func _text09(_: Void = ()) -> String {
        return NSLocalizedString("03_text09", tableName: "Localizable+Scan", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Überprüfen Sie den Status Ihrer Daten, damit wir sie schützen können.
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static func checkTheStatusOfYourDataSoWeCanProtectIt(_: Void = ()) -> String {
        return NSLocalizedString("Check the status of your data, so we can protect it.", tableName: "Localizable+Scan", bundle: R.hostingBundle, comment: "")
      }
      
      /// de translation: Überprüfung ...
      /// 
      /// Locales: de, he, ar, el, zh-Hans, ja, en, nb-NO, nb, es, sl, it, bg, sk, nn-NO, sr, ms, sv, cs, ko, zh-Hant, hu, tr, pl, lv, lt, nb-SJ, fr, fi, nl, th, nn, pt-PT, ro, hr
      static func checking(_: Void = ()) -> String {
        return NSLocalizedString("Checking...", tableName: "Localizable+Scan", bundle: R.hostingBundle, comment: "")
      }
      
      /// sv translation: 78 % av dina foton är för närvarande tillgängliga offentligt
      /// 
      /// Locales: sv
      static func ofYourPhotosYourPhotosAreCurrentlyInThePublicAccess(_: Void = ()) -> String {
        return NSLocalizedString("78% of your photos your photos are currently in the public access", tableName: "Localizable+Scan", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _BuySubscriptionCell.validate()
//      try _DFAppleImageCell.validate()
      try _EmptyFolderListView.validate()
      try _FilterMenuItemView.validate()
      try _FolderItemCell.validate()
      try _FolderListItemCell.validate()
      try _HorizontalMenuItemView.validate()
      try _MoveIntoItemCell.validate()
      try _OnboardingViewCell.validate()
    }
    
    struct _BuySubscriptionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = BuySubscriptionCell
      
      let bundle = R.hostingBundle
      let identifier = "BuySubscriptionCell"
      let name = "BuySubscriptionCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BuySubscriptionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BuySubscriptionCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "premium-buy-cell-arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'premium-buy-cell-arrow' is used in nib 'BuySubscriptionCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
//    struct _DFAppleImageCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
//      typealias ReusableType = DFAppleImageCell
//
//      let bundle = R.hostingBundle
//      let identifier = "DFAppleImageCell"
//      let name = "DFAppleImageCell"
//
//      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DFAppleImageCell? {
//        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DFAppleImageCell
//      }
//
//      static func validate() throws {
//        if UIKit.UIImage(named: "df-apple-intro-icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'df-apple-intro-icon' is used in nib 'DFAppleImageCell', but couldn't be loaded.") }
//        if #available(iOS 11.0, *) {
//        }
//      }
//
//      fileprivate init() {}
//    }
    
//    struct _DFAppleLoadingView: Rswift.NibResourceType {
//      let bundle = R.hostingBundle
//      let name = "DFAppleLoadingView"
//
//      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DFAppleLoadingView? {
//        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DFAppleLoadingView
//      }
//
//      fileprivate init() {}
//    }
//
//    struct _DFAppleSubtitleCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
//      typealias ReusableType = DFAppleSubtitleCell
//
//      let bundle = R.hostingBundle
//      let identifier = "DFAppleSubtitleCell"
//      let name = "DFAppleSubtitleCell"
//
//      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DFAppleSubtitleCell? {
//        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DFAppleSubtitleCell
//      }
//
//      fileprivate init() {}
//    }
//
//    struct _DFAppleTextCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
//      typealias ReusableType = DFAppleTextCell
//
//      let bundle = R.hostingBundle
//      let identifier = "DFAppleTextCell"
//      let name = "DFAppleTextCell"
//
//      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DFAppleTextCell? {
//        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DFAppleTextCell
//      }
//
//      fileprivate init() {}
//    }
//
//    struct _DFAppleTitleCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
//      typealias ReusableType = DFAppleTitleCell
//
//      let bundle = R.hostingBundle
//      let identifier = "DFAppleTitleCell"
//      let name = "DFAppleTitleCell"
//
//      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DFAppleTitleCell? {
//        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DFAppleTitleCell
//      }
//
//      fileprivate init() {}
//    }
    
    struct _EditItemCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = EditItemCell
      
      let bundle = R.hostingBundle
      let identifier = "EditItemCell"
      let name = "EditItemCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EditItemCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EditItemCell
      }
      
      fileprivate init() {}
    }
    
    struct _EmptyCollectionReusableView: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = EmptyCollectionReusableView
      
      let bundle = R.hostingBundle
      let identifier = "EmptyCollectionReusableView"
      let name = "EmptyCollectionReusableView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EmptyCollectionReusableView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EmptyCollectionReusableView
      }
      
      fileprivate init() {}
    }
    
    struct _EmptyCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = EmptyCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "EmptyCollectionViewCell"
      let name = "EmptyCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EmptyCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EmptyCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _EmptyFolderListView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "EmptyFolderListView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EmptyFolderListView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EmptyFolderListView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "IconMainScan", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'IconMainScan' is used in nib 'EmptyFolderListView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _FilterMenuItemView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "FilterMenuItemView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FilterMenuItemView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FilterMenuItemView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "document-loading", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'document-loading' is used in nib 'FilterMenuItemView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _FolderItemCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "FolderItemCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FolderItemCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FolderItemCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_select_docs_checked", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_select_docs_checked' is used in nib 'FolderItemCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _FolderListItemCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "FolderListItemCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FolderListItemCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FolderListItemCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "folder-list-arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'folder-list-arrow' is used in nib 'FolderListItemCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "folder-list-folder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'folder-list-folder' is used in nib 'FolderListItemCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "folder-list-line", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'folder-list-line' is used in nib 'FolderListItemCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _HorizontalMenuItemView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "HorizontalMenuItemView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HorizontalMenuItemView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HorizontalMenuItemView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "horizontal-menu-item-about", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'horizontal-menu-item-about' is used in nib 'HorizontalMenuItemView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _LoadingHud: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "LoadingHud"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LoadingHud? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LoadingHud
      }
      
      fileprivate init() {}
    }
    
    struct _MoveIntoItemCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MoveIntoItemCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MoveIntoItemCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MoveIntoItemCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "folder-list-folder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'folder-list-folder' is used in nib 'MoveIntoItemCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "folder-list-line", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'folder-list-line' is used in nib 'MoveIntoItemCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "image-nav-checked-enabled", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'image-nav-checked-enabled' is used in nib 'MoveIntoItemCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _NoContentView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "NoContentView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NoContentView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NoContentView
      }
      
      fileprivate init() {}
    }
    
    struct _OnboardingViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "OnboardingViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OnboardingViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OnboardingViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "permission-photoLibrary", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'permission-photoLibrary' is used in nib 'OnboardingViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _PreviewItemCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PreviewItemCell
      
      let bundle = R.hostingBundle
      let identifier = "PreviewItemCell"
      let name = "PreviewItemCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PreviewItemCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PreviewItemCell
      }
      
      fileprivate init() {}
    }
    
    struct _RecognizeLangsView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "RecognizeLangsView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RecognizeLangsView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RecognizeLangsView
      }
      
      fileprivate init() {}
    }
    
    struct _TitleView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TitleView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TitleView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TitleView
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
//      try dfAppleMemoryIntro.validate()
//      try dfAppleMemoryResults.validate()
//      try filterMenu.validate()
      try horizontalMenu.validate()
      try launchScreen.validate()
      try main.validate()
    }
    
//    struct dfAppleMemoryIntro: Rswift.StoryboardResourceType, Rswift.Validatable {
//      let bundle = R.hostingBundle
//      let dfAppleMemoryIntroViewController = StoryboardViewControllerResource<DFAppleMemoryIntroViewController>(identifier: "DFAppleMemoryIntroViewController")
//      let name = "DFAppleMemoryIntro"
//
//      func dfAppleMemoryIntroViewController(_: Void = ()) -> DFAppleMemoryIntroViewController? {
//        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: dfAppleMemoryIntroViewController)
//      }
//
//      static func validate() throws {
//        if #available(iOS 11.0, *) {
//        }
//        if _R.storyboard.dfAppleMemoryIntro().dfAppleMemoryIntroViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'dfAppleMemoryIntroViewController' could not be loaded from storyboard 'DFAppleMemoryIntro' as 'DFAppleMemoryIntroViewController'.") }
//      }
//
//      fileprivate init() {}
//    }
//
//    struct dfAppleMemoryResults: Rswift.StoryboardResourceType, Rswift.Validatable {
//      let bundle = R.hostingBundle
//      let dfAppleMemoryResultsViewController = StoryboardViewControllerResource<DFAppleMemoryResultsViewController>(identifier: "DFAppleMemoryResultsViewController")
//      let name = "DFAppleMemoryResults"
      
//      func dfAppleMemoryResultsViewController(_: Void = ()) -> DFAppleMemoryResultsViewController? {
//        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: dfAppleMemoryResultsViewController)
//      }
      
//      static func validate() throws {
//        if #available(iOS 11.0, *) {
//        }
//        if _R.storyboard.dfAppleMemoryResults().dfAppleMemoryResultsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'dfAppleMemoryResultsViewController' could not be loaded from storyboard 'DFAppleMemoryResults' as 'DFAppleMemoryResultsViewController'.") }
//      }
//
//      fileprivate init() {}
//    }
//
    struct filterMenu: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let filterMenuViewController = StoryboardViewControllerResource<FilterMenuViewController>(identifier: "FilterMenuViewController")
      let name = "FilterMenu"

      func filterMenuViewController(_: Void = ()) -> FilterMenuViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: filterMenuViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.filterMenu().filterMenuViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'filterMenuViewController' could not be loaded from storyboard 'FilterMenu' as 'FilterMenuViewController'.") }
      }

      fileprivate init() {}
    }
    
    struct horizontalMenu: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let horizontalMenuViewController = StoryboardViewControllerResource<HorizontalMenuViewController>(identifier: "HorizontalMenuViewController")
      let name = "HorizontalMenu"
      
      func horizontalMenuViewController(_: Void = ()) -> HorizontalMenuViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: horizontalMenuViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.horizontalMenu().horizontalMenuViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'horizontalMenuViewController' could not be loaded from storyboard 'HorizontalMenu' as 'HorizontalMenuViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "Splash-Loading", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Splash-Loading' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceType, Rswift.Validatable {
      let aboutViewController = StoryboardViewControllerResource<AboutViewController>(identifier: "AboutViewController")
      let bundle = R.hostingBundle
      let editViewController = StoryboardViewControllerResource<EditViewController>(identifier: "EditViewController")
      let folderListViewController = StoryboardViewControllerResource<FolderListViewController>(identifier: "FolderListViewController")
      let folderViewController = StoryboardViewControllerResource<FolderViewController>(identifier: "FolderViewController")
      let imageRecognizerViewController = StoryboardViewControllerResource<ImageRecognizerViewController>(identifier: "ImageRecognizerViewController")
      let moveViewController = StoryboardViewControllerResource<MoveViewController>(identifier: "MoveViewController")
      let name = "Main"
      let nameViewController = StoryboardViewControllerResource<NameViewController>(identifier: "NameViewController")
      let onboardingViewController = StoryboardViewControllerResource<OnboardingViewController>(identifier: "OnboardingViewController")
      let previewViewController = StoryboardViewControllerResource<PreviewViewController>(identifier: "PreviewViewController")
      let settingsViewController = StoryboardViewControllerResource<SettingsViewController>(identifier: "SettingsViewController")
      let splashViewController = StoryboardViewControllerResource<SplashViewController>(identifier: "SplashViewController")
      let subscriptionViewController = StoryboardViewControllerResource<SubscriptionViewController>(identifier: "SubscriptionViewController")
      
      func aboutViewController(_: Void = ()) -> AboutViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: aboutViewController)
      }
      
      func editViewController(_: Void = ()) -> EditViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: editViewController)
      }
      
      func folderListViewController(_: Void = ()) -> FolderListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: folderListViewController)
      }
      
      func folderViewController(_: Void = ()) -> FolderViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: folderViewController)
      }
      
      func imageRecognizerViewController(_: Void = ()) -> ImageRecognizerViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: imageRecognizerViewController)
      }
      
      func moveViewController(_: Void = ()) -> MoveViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: moveViewController)
      }
      
      func nameViewController(_: Void = ()) -> NameViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: nameViewController)
      }
      
      func onboardingViewController(_: Void = ()) -> OnboardingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: onboardingViewController)
      }
      
      func previewViewController(_: Void = ()) -> PreviewViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: previewViewController)
      }
      
      func settingsViewController(_: Void = ()) -> SettingsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingsViewController)
      }
      
      func splashViewController(_: Void = ()) -> SplashViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: splashViewController)
      }
      
      func subscriptionViewController(_: Void = ()) -> SubscriptionViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: subscriptionViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Splash-Loading", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Splash-Loading' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "edit-document-crop", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'edit-document-crop' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "edit-document-delete", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'edit-document-delete' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "edit-document-rotate", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'edit-document-rotate' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "launch-screen-logo-animated.gif", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'launch-screen-logo-animated.gif' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "premium-logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'premium-logo' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.main().aboutViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'aboutViewController' could not be loaded from storyboard 'Main' as 'AboutViewController'.") }
        if _R.storyboard.main().editViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'editViewController' could not be loaded from storyboard 'Main' as 'EditViewController'.") }
        if _R.storyboard.main().folderListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'folderListViewController' could not be loaded from storyboard 'Main' as 'FolderListViewController'.") }
        if _R.storyboard.main().folderViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'folderViewController' could not be loaded from storyboard 'Main' as 'FolderViewController'.") }
        if _R.storyboard.main().imageRecognizerViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'imageRecognizerViewController' could not be loaded from storyboard 'Main' as 'ImageRecognizerViewController'.") }
        if _R.storyboard.main().moveViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'moveViewController' could not be loaded from storyboard 'Main' as 'MoveViewController'.") }
        if _R.storyboard.main().nameViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'nameViewController' could not be loaded from storyboard 'Main' as 'NameViewController'.") }
        if _R.storyboard.main().onboardingViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'onboardingViewController' could not be loaded from storyboard 'Main' as 'OnboardingViewController'.") }
        if _R.storyboard.main().previewViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'previewViewController' could not be loaded from storyboard 'Main' as 'PreviewViewController'.") }
        if _R.storyboard.main().settingsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingsViewController' could not be loaded from storyboard 'Main' as 'SettingsViewController'.") }
        if _R.storyboard.main().splashViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'splashViewController' could not be loaded from storyboard 'Main' as 'SplashViewController'.") }
        if _R.storyboard.main().subscriptionViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'subscriptionViewController' could not be loaded from storyboard 'Main' as 'SubscriptionViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
